#Things to add
#Get peoples pr to display * is throw was a pr
#Grab meet name to display what meet results are from
#Find a way to grab results for men/women shot and weight (4 time running script get correct link to the events
    #I think if I use meet page then look for mens table then shot's href and weight href then same for women it would work
#Start with exporting the results to a txt file then maybe later implement php or js to put it into a webpage(html)
#Go back and look at code to see if it could be made better? (refactor)
#If website route is gone down maybe add a list option to see other schools results or conference standings eventually

#This function take a url and returns 2 lists first being names second being the marks for that name orginized by index 


#!!!!!!!!!!!!!!!!!!!!!
#Use second style tag to figure our which rounds are not displayed
#use this round number to find
#
from urllib.request import urlopen
from bs4 import BeautifulSoup
def Diff(li1, li2):
    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]
    return li_dif

def PointerResults(url):
    html = urlopen(url)
    soup=BeautifulSoup(html.read());
    #Gets style tags (inlkine style)
    styles=soup.findAll('style')
    text=styles[1].getText()
    wrongRounds=[]
    round=''
    classFoundFlag=False
    #Goes through second style tag to find out which class are not displayed to be able to grab right "round" to get right name and marks.
    for each in text:
        if each=='{':
            classFoundFlag=False
            wrongRounds.append(round.strip())
            round=''
        if classFoundFlag:
            round=round+each
        if each=='.':
            classFoundFlag=True
    resultsTable=soup.find("tbody")
    allRoundsNotFound=True
    foundRounds=[]
    #stops looking for classes when duplicate is found
    while allRoundsNotFound:
        for each in resultsTable.findAll('td'):
            if each.attrs['class'][0] in foundRounds:
                allRoundsNotFound=False
                break
            foundRounds.append(each.attrs['class'][0])
    rightRound=(Diff(foundRounds,wrongRounds)[0])#CAUSE EARRORS MAYBE IF MORE THAN one RIGHT ROUND
    namesRows = []
    marksRows = []
    names=[]#will get returned
    marks=[]#will get returned
#Goes through the resultsAndNamesRows list every even row is a names row odd rows are marks rows
#Due to how the HTML is formatted on the site
    resultsAndNamesRows=resultsTable.findAll('tr')
    for index,eachRow in enumerate(resultsAndNamesRows):
        if index%2==0:
            tabledData=eachRow.findAll('td',class_=rightRound)
            if "Wis_Stevens_Point" in tabledData[1].find("a")["href"]:#Grabs first <a> tag which is the correct thrower
                names.append(tabledData[1].find("a").getText()) #got rid of for loop with adding to names here
                marksRows.append(resultsAndNamesRows[index+1])#adds that persons marks row so same index
    marksFormatted=[]
    for i in marksRows:
        marks=i.findAll("li")
        c=[]
        for i in marks:
            i=i.getText().strip().strip("m")
            if i=='' :
                break
            c.append(i)
        marksFormatted.append(c)
    highestMarks = []
    throwNumbers = []
    a=0
    for i in marksFormatted:
        championMark=0
        throwNumber=0
        b=0
        for i in marksFormatted[a]:
            if marksFormatted[a][b] =='FOUL':
                marksFormatted[a][b]=0
            if float(marksFormatted[a][b])>championMark:
                championMark=float(marksFormatted[a][b])
                throwNumber=b+1
            b=b+1
        highestMarks.append(championMark)
        throwNumbers.append(throwNumber)
        a=a+1
    for index,i in enumerate(names):
        print(i, " threw ", highestMarks[index], " on throw ", throwNumbers[index])
    return names,marksFormatted

url = 'https://www.tfrrs.org/results/70849/4360871/Big_Dawg_Invitational/'
a=PointerResults(url)
       #find round might be uselfule later if not delete
       #round = eachNameRow.find(class_=True).attrs['class'][0]

#Prints who threw what mark on what throw (for testing)
a=0
for i in names:
    print(names[a], " threw ", highestmarks[a], " on throw ", thrownumbers[a])
    a=a+1

import csv
with open (r"C:\Users\akopp\TrackApp\track\pr.txt", 'r') as f:
    prs = [row[0] for row in csv.reader(f,delimiter='\t')]
    prs= (prs[1:])#Gets rid of first row without name or someones pr's
#Goes through prs to first find person whoes highest mark is getting analyzed(search by last name with contains)
#Puts the correct index (right name) from prs into a new temp array of marks that go WEIGHT,SHOT,HAMMER,DISCUS
#Depending on what event is being analyzed for to index 0-3 to check if that number is smaller than the higest mark at the meet
#If it is it will print a symbol(*) next to the number in the results page to symbolize a pr
#if not just print number normally (might change to only do pr's)
#Print event name (ie mens weight) then under Name and distance thrown do for all events put in results file.
for eachName in names:
    print(eachName)
    for eachPr in prs: